# Default values for Modern-BI-STACK.
# This is a YAML-formatted file.
# Declare variables to be passed into your templates.

imagePullSecrets: []
nameOverride: ""
fullnameOverride: ""

serviceAccount:
  # Specifies whether a service account should be created
  create: true
  # Annotations to add to the service account
  annotations: {}
  # The name of the service account to use.
  # If not set and create is true, a name is generated using the fullname template
  name: ""

podAnnotations: {}

podSecurityContext: {}
  # fsGroup: 2000

securityContext: {}
  # capabilities:
  #   drop:
  #   - ALL
  # readOnlyRootFilesystem: true
  # runAsNonRoot: true
  # runAsUser: 1000

service:
  type: ClusterIP
  port: 80

ingress:
  enabled: false
  className: ""
  annotations: {}
    # kubernetes.io/ingress.class: nginx
    # kubernetes.io/tls-acme: "true"
  hosts:
    - host: chart-example.local
      paths:
        - path: /
          pathType: ImplementationSpecific
  tls: []
  #  - secretName: chart-example-tls
  #    hosts:
  #      - chart-example.local

resources: {}
  # We usually recommend not to specify default resources and to leave this as a conscious
  # choice for the user. This also increases chances charts run on environments with little
  # resources, such as Minikube. If you do want to specify resources, uncomment the following
  # lines, adjust them as necessary, and remove the curly braces after 'resources:'.
  # limits:
  #   cpu: 100m
  #   memory: 128Mi
  # requests:
  #   cpu: 100m
  #   memory: 128Mi

autoscaling:
  enabled: false
  minReplicas: 1
  maxReplicas: 100
  targetCPUUtilizationPercentage: 80
  # targetMemoryUtilizationPercentage: 80

nodeSelector: {}

tolerations: []

affinity: {}

fluentbit:
  fluentdHost: fluentd.default
  fluentdPort: 24224 

airflow:
  enabled: true
  affinity: {}
  airflowConfigAnnotations: {}
  airflowHome: /opt/airflow
  airflowLocalSettings: |-
    {{- if semverCompare ">=2.2.0" .Values.airflowVersion }}
    {{- if not (or .Values.webserverSecretKey .Values.webserverSecretKeySecretName) }}
    from airflow.www.utils import UIAlert

    DASHBOARD_UIALERTS = [
      UIAlert(
        'Usage of a dynamic webserver secret key detected. We recommend a static webserver secret key instead.'
        ' See the <a href='
        '"https://airflow.apache.org/docs/helm-chart/stable/production-guide.html#webserver-secret-key">'
        'Helm Chart Production Guide</a> for more details.',
        category="warning",
        roles=["Admin"],
        html=True,
      )
    ]
    {{- end }}
    {{- end }}
  airflowPodAnnotations: {}
  airflowVersion: 2.4.1
  allowPodLaunching: true
  cleanup:
    affinity: {}
    args:
    - bash
    - -c
    - exec airflow kubernetes cleanup-pods --namespace={{ .Release.Namespace }}
    enabled: false
    env: []
    labels: {}
    nodeSelector: {}
    podAnnotations: {}
    resources: {}
    schedule: '*/15 * * * *'
    securityContext: {}
    serviceAccount:
      annotations: {}
      create: true
    tolerations: []
    topologySpreadConstraints: []
  config:
    celery:
      flower_url_prefix: '{{ .Values.ingress.flower.path }}'
      worker_concurrency: 16
    celery_kubernetes_executor:
      kubernetes_queue: kubernetes
    core:
      colored_console_log: "False"
      dags_folder: '{{ include "airflow_dags" . }}'
      executor: '{{ .Values.executor }}'
      load_examples: "False"
      remote_logging: '{{- ternary "True" "False" .Values.elasticsearch.enabled }}'
    elasticsearch:
      json_format: "True"
      log_id_template: '{dag_id}_{task_id}_{execution_date}_{try_number}'
      write_stdout: "True"
    elasticsearch_configs:
      max_retries: 3
      retry_timeout: "True"
      timeout: 30
    kerberos:
      ccache: '{{ .Values.kerberos.ccacheMountPath }}/{{ .Values.kerberos.ccacheFileName
        }}'
      keytab: '{{ .Values.kerberos.keytabPath }}'
      principal: '{{ .Values.kerberos.principal }}'
      reinit_frequency: '{{ .Values.kerberos.reinitFrequency }}'
    kubernetes:
      airflow_configmap: '{{ include "airflow_config" . }}'
      airflow_local_settings_configmap: '{{ include "airflow_config" . }}'
      multi_namespace_mode: '{{ ternary "True" "False" .Values.multiNamespaceMode
        }}'
      namespace: '{{ .Release.Namespace }}'
      pod_template_file: '{{ include "airflow_pod_template_file" . }}/pod_template_file.yaml'
      worker_container_repository: '{{ .Values.images.airflow.repository | default
        .Values.defaultAirflowRepository }}'
      worker_container_tag: '{{ .Values.images.airflow.tag | default .Values.defaultAirflowTag
        }}'
    logging:
      colored_console_log: "False"
      remote_logging: '{{- ternary "True" "False" .Values.elasticsearch.enabled }}'
    metrics:
      statsd_host: '{{ printf "%s-statsd" .Release.Name }}'
      statsd_on: '{{ ternary "True" "False" .Values.statsd.enabled }}'
      statsd_port: 9125
      statsd_prefix: airflow
    scheduler:
      run_duration: 41460
      standalone_dag_processor: '{{ ternary "True" "False" .Values.dagProcessor.enabled
        }}'
      statsd_host: '{{ printf "%s-statsd" .Release.Name }}'
      statsd_on: '{{ ternary "True" "False" .Values.statsd.enabled }}'
      statsd_port: 9125
      statsd_prefix: airflow
    webserver:
      enable_proxy_fix: "True"
      rbac: "True"
  createUserJob:
    affinity: {}
    annotations: {}
    args:
    - bash
    - -c
    - |-
      exec \
      airflow {{ semverCompare ">=2.0.0" .Values.airflowVersion | ternary "users create" "create_user" }} "$@"
    - --
    - -r
    - '{{ .Values.webserver.defaultUser.role }}'
    - -u
    - '{{ .Values.webserver.defaultUser.username }}'
    - -e
    - '{{ .Values.webserver.defaultUser.email }}'
    - -f
    - '{{ .Values.webserver.defaultUser.firstName }}'
    - -l
    - '{{ .Values.webserver.defaultUser.lastName }}'
    - -p
    - '{{ .Values.webserver.defaultUser.password }}'
    env: []
    extraContainers: []
    extraVolumeMounts: []
    extraVolumes: []
    jobAnnotations: {}
    labels: {}
    nodeSelector: {}
    resources: {}
    securityContext: {}
    serviceAccount:
      annotations: {}
      create: true
    tolerations: []
    topologySpreadConstraints: []
    useHelmHooks: true
  dagProcessor:
    affinity: {}
    args:
    - bash
    - -c
    - exec airflow dag-processor
    enabled: false
    env: []
    extraContainers: []
    extraInitContainers: []
    extraVolumeMounts: []
    extraVolumes: []
    livenessProbe:
      failureThreshold: 5
      initialDelaySeconds: 10
      periodSeconds: 60
      timeoutSeconds: 20
    nodeSelector: {}
    podAnnotations: {}
    replicas: 1
    resources: {}
    safeToEvict: true
    securityContext: {}
    serviceAccount:
      annotations: {}
      create: true
    strategy:
      rollingUpdate:
        maxSurge: 100%
        maxUnavailable: 50%
    terminationGracePeriodSeconds: 60
    tolerations: []
    topologySpreadConstraints: []
    waitForMigrations:
      enabled: true
      env: []
  dags:
    gitSync:
      branch: dev    # change
      containerName: git-sync
      
      depth: 1
      enabled: true
      env:
      - name: http_proxy
        value: http://192.168.42.15:3128
      - name: https_proxy
        value: http://192.168.42.15:3128
      extraVolumeMounts: []
      maxFailures: 0
      repo: https://github.com/data354/OCI-JOBS.git # change
      resources: {}
      rev: HEAD
      securityContext: {}
      sshKeySecret: null
      subPath: dags
      uid: 65533
      wait: 60
    persistence:
      accessMode: ReadWriteOnce
      enabled: false
      size: 5Gi
  data:
    metadataConnection:
      db: postgres
      pass: postgres
      port: 5432
      protocol: postgresql
      sslmode: disable
      user: postgres
  defaultAirflowRepository: apache/airflow
  defaultAirflowTag: 2.4.1
  elasticsearch:
    connection:
      host: loki.default
      port: 3100
    enabled: false
  enableBuiltInSecretEnvVars:
    AIRFLOW__CELERY__BROKER_URL: true
    AIRFLOW__CELERY__CELERY_RESULT_BACKEND: true
    AIRFLOW__CELERY__RESULT_BACKEND: true
    AIRFLOW__CORE__FERNET_KEY: true
    AIRFLOW__CORE__SQL_ALCHEMY_CONN: true
    AIRFLOW__DATABASE__SQL_ALCHEMY_CONN: true
    AIRFLOW__ELASTICSEARCH__ELASTICSEARCH_HOST: true
    AIRFLOW__ELASTICSEARCH__HOST: true
    AIRFLOW__WEBSERVER__SECRET_KEY: true
    AIRFLOW_CONN_AIRFLOW_DB: true
  enabled: true
  env: []
  executor: CeleryExecutor
  extraConfigMaps: {}
  extraSecrets: {}
  flower:
    affinity: {}
    args:
    - bash
    - -c
    - |-
      exec \
      airflow {{ semverCompare ">=2.0.0" .Values.airflowVersion | ternary "celery flower" "flower" }}
    enabled: false
    env: []
    extraContainers: []
    extraNetworkPolicies: []
    extraVolumeMounts: []
    extraVolumes: []
    labels: {}
    networkPolicy:
      ingress:
        from: []
        ports:
        - port: '{{ .Values.ports.flowerUI }}'
    nodeSelector: {}
    podAnnotations: {}
    resources: {}
    securityContext: {}
    service:
      annotations: {}
      loadBalancerSourceRanges: []
      ports:
      - name: flower-ui
        port: '{{ .Values.ports.flowerUI }}'
      type: ClusterIP
    serviceAccount:
      annotations: {}
      create: true
    tolerations: []
    topologySpreadConstraints: []
  fullnameOverride: ""
  gid: 0
  git:
    connexionType: http
    login: yasmine-datalab                              # change
    password: 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  # change
  global: {}
  images:
    airflow:
      pullPolicy: IfNotPresent  
      repository: team354/airflow-gps           # change
      tag: 1.4.0                                # change
    flower:
      pullPolicy: IfNotPresent
    gitSync:
      pullPolicy: IfNotPresent
      repository: k8s.gcr.io/git-sync/git-sync   # change
      tag: v3.4.0                                 # change
    migrationsWaitTimeout: 120
    pgbouncer:
      pullPolicy: IfNotPresent
      repository: apache/airflow                  # change
      tag: airflow-pgbouncer-2021.04.28-1.14.0   # change
    pgbouncerExporter:
      pullPolicy: IfNotPresent                # change
      repository: apache/airflow              # change
      tag: airflow-pgbouncer-exporter-2021.09.22-0.12.0   # change
    pod_template:
      pullPolicy: IfNotPresent
    redis:
      pullPolicy: IfNotPresent
      repository: redis       # change
      tag: 6-bullseye         # change
    statsd:
      pullPolicy: IfNotPresent      
      repository: quay.io/prometheus/statsd-exporter   # change
      tag: v0.22.8    # change
    useDefaultImageForMigration: false
  ingress:
    flower:
      annotations: {}
      enabled: false
      host: ""
      hosts: []
      ingressClassName: ""
      path: /
      pathType: ImplementationSpecific
      tls:
        enabled: false
        secretName: ""
    web:
      annotations: {}
      enabled: false
      host: ""
      hosts: []
      ingressClassName: ""
      path: /
      pathType: ImplementationSpecific
      precedingPaths: []
      succeedingPaths: []
      tls:
        enabled: false
        secretName: ""
  kerberos:
    ccacheFileName: cache
    ccacheMountPath: /var/kerberos-ccache
    config: |
      # This is an example config showing how you can use templating and how "example" config
      # might look like. It works with the test kerberos server that we are using during integration
      # testing at Apache Airflow (see `scripts/ci/docker-compose/integration-kerberos.yml` but in
      # order to make it production-ready you must replace it with your own configuration that
      # Matches your kerberos deployment. Administrators of your Kerberos instance should
      # provide the right configuration.

      [logging]
      default = "FILE:{{ template "airflow_logs_no_quote" . }}/kerberos_libs.log"
      kdc = "FILE:{{ template "airflow_logs_no_quote" . }}/kerberos_kdc.log"
      admin_server = "FILE:{{ template "airflow_logs_no_quote" . }}/kadmind.log"

      [libdefaults]
      default_realm = FOO.COM
      ticket_lifetime = 10h
      renew_lifetime = 7d
      forwardable = true

      [realms]
      FOO.COM = {
        kdc = kdc-server.foo.com
        admin_server = admin_server.foo.com
      }
    configPath: /etc/krb5.conf
    enabled: false
    keytabPath: /etc/airflow.keytab
    principal: airflow@FOO.COM
    reinitFrequency: 3600
  kubeVersionOverride: ""
  labels: {}
  limits: []
  logs:
    persistence:
      enabled: false
      size: 100Gi
  migrateDatabaseJob:
    affinity: {}
    annotations: {}
    args:
    - bash
    - -c
    - |-
      exec \
      airflow {{ semverCompare ">=2.0.0" .Values.airflowVersion | ternary "db upgrade" "upgradedb" }}
    enabled: true
    extraContainers: []
    extraVolumeMounts: []
    extraVolumes: []
    jobAnnotations: {}
    nodeSelector: {}
    resources: {}
    securityContext: {}
    serviceAccount:
      annotations: {}
      create: true
    tolerations: []
    topologySpreadConstraints: []
    useHelmHooks: true
  multiNamespaceMode: false
  nameOverride: ""
  networkPolicies:
    enabled: false
  nodeSelector: {}
  pgbouncer:
    affinity: {}
    auth_file: /etc/pgbouncer/users.txt
    auth_type: md5
    ciphers: normal
    command:
    - pgbouncer
    - -u
    - nobody
    - /etc/pgbouncer/pgbouncer.ini
    enabled: false
    extraNetworkPolicies: []
    extraVolumeMounts: []
    extraVolumes: []
    logConnections: 0
    logDisconnections: 0
    maxClientConn: 100
    metadataPoolSize: 10
    metricsExporterSidecar:
      resources: {}
      sslmode: disable
    nodeSelector: {}
    podDisruptionBudget:
      config:
        maxUnavailable: 1
      enabled: false
    resources: {}
    resultBackendPoolSize: 5
    service:
      extraAnnotations: {}
    serviceAccount:
      annotations: {}
      create: true
    ssl: {}
    sslmode: prefer
    tolerations: []
    topologySpreadConstraints: []
    uid: 65534
    verbose: 0
  ports:
    airflowUI: 8080
    flowerUI: 5555
    pgbouncer: 6543
    pgbouncerScrape: 9127
    redisDB: 6379
    statsdIngest: 9125
    statsdScrape: 9102
    workerLogs: 8793
  postgresql:
    audit:
      clientMinMessages: error
      logConnections: false
      logDisconnections: false
      logHostname: false
      logLinePrefix: ""
      logTimezone: ""
      pgAuditLog: ""
      pgAuditLogCatalog: "off"
    common:
      exampleValue: common-chart
      global:
        imagePullSecrets: []
        postgresql: {}
    commonAnnotations: {}
    containerSecurityContext:
      enabled: true
      runAsUser: 1001
    customLivenessProbe: {}
    customReadinessProbe: {}
    customStartupProbe: {}
    enabled: true
    extraDeploy: []
    extraEnv: []
    global:
      imagePullSecrets: []
      postgresql:
        existingSecret: null
        postgresqlDatabase: null
        postgresqlPassword: null
        postgresqlUsername: null
        replicationPassword: null
        servicePort: null
    image:
      debug: false
      pullPolicy: IfNotPresent
      pullSecrets: []
      registry: docker.io   # change
      repository: bitnami/postgresql    # change
      tag: 11.12.0-debian-10-r44     # change
    initdbScripts: {}
    ldap:
      baseDN: ""
      bind_password: null
      bindDN: ""
      enabled: false
      port: ""
      prefix: ""
      scheme: ""
      search_attr: ""
      search_filter: ""
      server: ""
      suffix: ""
      tls: {}
      url: ""
    livenessProbe:
      enabled: true
      failureThreshold: 6
      initialDelaySeconds: 30
      periodSeconds: 10
      successThreshold: 1
      timeoutSeconds: 5
    metrics:
      customMetrics: {}
      enabled: false
      extraEnvVars: {}
      image:
        pullPolicy: IfNotPresent
        pullSecrets: []
        registry: docker.io
        repository: bitnami/postgres-exporter
        tag: 0.9.0-debian-10-r108
      livenessProbe:
        enabled: true
        failureThreshold: 6
        initialDelaySeconds: 5
        periodSeconds: 10
        successThreshold: 1
        timeoutSeconds: 5
      prometheusRule:
        additionalLabels: {}
        enabled: false
        namespace: ""
        rules: []
      readinessProbe:
        enabled: true
        failureThreshold: 6
        initialDelaySeconds: 5
        periodSeconds: 10
        successThreshold: 1
        timeoutSeconds: 5
      resources: {}
      securityContext:
        enabled: false
        runAsUser: 1001
      service:
        annotations:
          prometheus.io/port: "9187"
          prometheus.io/scrape: "true"
        loadBalancerIP: null
        type: ClusterIP
      serviceMonitor:
        additionalLabels: {}
        enabled: false
        interval: null
        namespace: null
        scrapeTimeout: null
    networkPolicy:
      allowExternal: true
      enabled: false
      explicitNamespacesSelector: {}
    persistence:
      accessModes:
      - ReadWriteOnce
      annotations: {}
      enabled: true
      existingClaim: null
      mountPath: /bitnami/postgresql
      selector: {}
      size: 8Gi
      storageClass: null
      subPath: ""
    pgHbaConfiguration: ""
    postgresqlDataDir: /bitnami/postgresql/data
    postgresqlPassword: postgres
    postgresqlSharedPreloadLibraries: pgaudit
    postgresqlUsername: postgres
    primary:
      affinity: {}
      annotations: {}
      extraInitContainers: []
      extraVolumeMounts: []
      extraVolumes: []
      labels: {}
      nodeAffinityPreset:
        key: ""
        type: ""
        values: []
      nodeSelector: {}
      podAffinityPreset: ""
      podAnnotations: {}
      podAntiAffinityPreset: soft
      podLabels: {}
      priorityClassName: ""
      service:
        clusterIP: null
        nodePort: null
        type: null
      sidecars: []
      tolerations: []
    primaryAsStandBy:
      enabled: false
      primaryHost: null
      primaryPort: null
    psp:
      create: false
    rbac:
      create: false
    readReplicas:
      affinity: {}
      annotations: {}
      extraInitContainers: []
      extraVolumeMounts: []
      extraVolumes: []
      labels: {}
      nodeAffinityPreset:
        key: ""
        type: ""
        values: []
      nodeSelector: {}
      persistence:
        enabled: true
      podAffinityPreset: ""
      podAnnotations: {}
      podAntiAffinityPreset: soft
      podLabels: {}
      priorityClassName: ""
      resources: {}
      service:
        clusterIP: null
        nodePort: null
        type: null
      sidecars: []
      tolerations: []
    readinessProbe:
      enabled: true
      failureThreshold: 6
      initialDelaySeconds: 5
      periodSeconds: 10
      successThreshold: 1
      timeoutSeconds: 5
    replication:
      applicationName: my_application
      enabled: false
      numSynchronousReplicas: 0
      password: repl_password
      readReplicas: 1
      synchronousCommit: "off"
      user: repl_user
    resources:
      requests:
        cpu: 250m
        memory: 256Mi
    securityContext:
      enabled: true
      fsGroup: 1001
    service:
      annotations: {}
      clusterIP: null
      loadBalancerIP: null
      loadBalancerSourceRanges: []
      nodePort: null
      port: 5432
      type: ClusterIP
    serviceAccount:
      enabled: false
      name: null
    shmVolume:
      chmod:
        enabled: true
      enabled: true
      sizeLimit: null
    startupProbe:
      enabled: false
      failureThreshold: 10
      initialDelaySeconds: 30
      periodSeconds: 15
      successThreshold: 1
      timeoutSeconds: 5
    tls:
      autoGenerated: false
      certCAFilename: null
      certFilename: ""
      certKeyFilename: ""
      certificatesSecret: ""
      crlFilename: null
      enabled: false
      preferServerCiphers: true
    updateStrategy:
      type: RollingUpdate
    usePasswordFile: false
    volumePermissions:
      enabled: false
      image:
        pullPolicy: Always
        pullSecrets: []
        registry: docker.io
        repository: bitnami/bitnami-shell
        tag: 10-debian-10-r125
      securityContext:
        runAsUser: 0
  quotas: {}
  rbac:
    create: true
    createSCCRoleBinding: false
  redis:
    affinity: {}
    enabled: true
    nodeSelector: {}
    persistence:
      annotations: {}
      enabled: true
      size: 5Gi
    podAnnotations: {}
    resources: {}
    safeToEvict: true
    securityContext: {}
    serviceAccount:
      annotations: {}
      create: true
    terminationGracePeriodSeconds: 600
    tolerations: []
    topologySpreadConstraints: []
    uid: 0
  registry:
    connection: {}
  scheduler:
    affinity: {}
    args:
    - bash
    - -c
    - exec airflow scheduler
    env: []
    extraContainers: []
    extraInitContainers: []
    extraVolumeMounts: []
    extraVolumes: []
    labels: {}
    livenessProbe:
      failureThreshold: 5
      initialDelaySeconds: 10
      periodSeconds: 60
      timeoutSeconds: 20
    logGroomerSidecar:
      args:
      - bash
      - /clean-logs
      enabled: true
      resources: {}
      retentionDays: 15
    nodeSelector: {}
    podAnnotations: {}
    podDisruptionBudget:
      config:
        maxUnavailable: 1
      enabled: false
    replicas: 1
    resources: {}
    safeToEvict: true
    securityContext: {}
    serviceAccount:
      annotations: {}
      create: true
    tolerations: []
    topologySpreadConstraints: []
    waitForMigrations:
      enabled: true
      env: []
  secret: []
  securityContext: {}
  statsd:
    affinity: {}
    enabled: true
    extraMappings: []
    extraNetworkPolicies: []
    nodeSelector: {}
    overrideMappings: []
    podAnnotations: {}
    resources: {}
    securityContext: {}
    service:
      extraAnnotations: {}
    serviceAccount:
      annotations: {}
      create: true
    tolerations: []
    topologySpreadConstraints: []
    uid: 65534
  tolerations: []
  topologySpreadConstraints: []
  triggerer:
    affinity: {}
    args:
    - bash
    - -c
    - exec airflow triggerer
    enabled: true
    env: []
    extraContainers: []
    extraInitContainers: []
    extraVolumeMounts: []
    extraVolumes: []
    labels: {}
    livenessProbe:
      failureThreshold: 5
      initialDelaySeconds: 10
      periodSeconds: 60
      timeoutSeconds: 20
    nodeSelector: {}
    podAnnotations: {}
    replicas: 1
    resources: {}
    safeToEvict: true
    securityContext: {}
    serviceAccount:
      annotations: {}
      create: true
    strategy:
      rollingUpdate:
        maxSurge: 100%
        maxUnavailable: 50%
    terminationGracePeriodSeconds: 60
    tolerations: []
    topologySpreadConstraints: []
    waitForMigrations:
      enabled: true
      env: []
  uid: 50000
  webserver:
    affinity: {}
    allowPodLogReading: true
    args:
    - bash
    - -c
    - exec airflow webserver
    defaultUser:
      email: admin@example.com
      enabled: true
      firstName: admin
      lastName: user
      password: admin
      role: Admin
      username: admin
    env: []
    extraContainers: []
    extraInitContainers: []
    extraNetworkPolicies: []
    extraVolumeMounts: []
    extraVolumes: []
    labels: {}
    livenessProbe:
      failureThreshold: 20
      initialDelaySeconds: 15
      periodSeconds: 5
      scheme: HTTP
      timeoutSeconds: 30
    networkPolicy:
      ingress:
        from: []
        ports:
        - port: '{{ .Values.ports.airflowUI }}'
    nodeSelector: {}
    podAnnotations: {}
    podDisruptionBudget:
      config:
        maxUnavailable: 1
      enabled: false
    readinessProbe:
      failureThreshold: 20
      initialDelaySeconds: 15
      periodSeconds: 5
      scheme: HTTP
      timeoutSeconds: 30
    replicas: 1
    resources: {}
    securityContext: {}
    service:
      annotations: {}
      loadBalancerSourceRanges: []
      ports:
      - name: airflow-ui
        port: '{{ .Values.ports.airflowUI }}'
      type: ClusterIP
    serviceAccount:
      annotations: {}
      create: true
    tolerations: []
    topologySpreadConstraints: []
    waitForMigrations:
      enabled: true
      env: []
  workers:
    affinity: {}
    args:
    - bash
    - -c
    - |-
      exec \
      airflow {{ semverCompare ">=2.0.0" .Values.airflowVersion | ternary "celery worker" "worker" }}
    env: []
    extraContainers: []
    extraInitContainers: []
    extraVolumeMounts: []
    extraVolumes: []
    hostAliases: []
    keda:
      advanced: {}
      cooldownPeriod: 30
      enabled: false
      maxReplicaCount: 10
      minReplicaCount: 0
      namespaceLabels: {}
      pollingInterval: 5
    kerberosSidecar:
      enabled: false
      resources: {}
    labels: {}
    livenessProbe:
      enabled: true
      failureThreshold: 5
      initialDelaySeconds: 10
      periodSeconds: 60
      timeoutSeconds: 20
    logGroomerSidecar:
      args:
      - bash
      - /clean-logs
      resources: {}
      retentionDays: 15
    nodeSelector: {}
    persistence:
      annotations: {}
      enabled: true
      fixPermissions: false
      size: 10Gi
    podAnnotations: {}
    replicas: 1
    resources: {}
    safeToEvict: true
    securityContext: {}
    serviceAccount:
      annotations: {}
      create: true
    strategy:
      rollingUpdate:
        maxSurge: 100%
        maxUnavailable: 50%
    terminationGracePeriodSeconds: 600
    tolerations: []
    topologySpreadConstraints: []
    waitForMigrations:
      env: []


pg:
  enabled : true
  architecture: standalone
  audit:
    clientMinMessages: error
    logConnections: false
    logDisconnections: false
    logHostname: false
    logLinePrefix: ""
    logTimezone: ""
    pgAuditLog: ""
    pgAuditLogCatalog: "off"
  auth:
    database: "gps_data"
    enablePostgresUser: true
    existingSecret: ""
    password: "gpspassword"
    postgresPassword: "gpsadminpassword"
    replicationPassword: ""
    replicationUsername: repl_user
    secretKeys:
      adminPasswordKey: postgres-password
      replicationPasswordKey: replication-password
      userPasswordKey: password
    usePasswordFiles: false
    username: "gpsuser"
  clusterDomain: cluster.local
  common:
    exampleValue: common-chart
    global:
      imagePullSecrets: []
      imageRegistry: ""
      postgresql:
        auth:
          database: "gps_data"
          existingSecret: ""
          password: "gpspassword"
          postgresPassword: "gpsadminpassword"
          secretKeys:
            adminPasswordKey: ""
            replicationPasswordKey: ""
            userPasswordKey: ""
          username: "gpsuser"
        service:
          ports:
            postgresql: ""
      storageClass: ""
  commonAnnotations: {}
  commonLabels: {}
  containerPorts:
    postgresql: 5432
  diagnosticMode:
    args:
    - infinity
    command:
    - sleep
    enabled: false
  extraDeploy: []
  fullnameOverride: ""
  global:
    imagePullSecrets: []
    imageRegistry: ""
    postgresql:
      auth:
        database: "gps_data"
        existingSecret: ""
        password: "gpspassword"
        postgresPassword: "gpsadminpassword"
        secretKeys:
          adminPasswordKey: ""
          replicationPasswordKey: ""
          userPasswordKey: ""
        username: "gpsuser"
      service:
        ports:
          postgresql: ""
    storageClass: ""
  image:
    debug: false
    digest: ""
    pullPolicy: IfNotPresent
    pullSecrets: []
    registry: docker.io
    repository: bitnami/postgresql
    tag: 15.2.0-debian-11-r13
  kubeVersion: ""
  ldap:
    basedn: ""
    binddn: ""
    bindpw: ""
    enabled: false
    port: ""
    prefix: ""
    scheme: ""
    searchAttribute: ""
    searchFilter: ""
    server: ""
    suffix: ""
    tls:
      enabled: false
    uri: ""
  metrics:
    containerPorts:
      metrics: 9187
    containerSecurityContext:
      enabled: true
      runAsNonRoot: true
      runAsUser: 1001
    customLivenessProbe: {}
    customMetrics: {}
    customReadinessProbe: {}
    customStartupProbe: {}
    enabled: false
    extraEnvVars: []
    image:
      digest: ""
      pullPolicy: IfNotPresent
      pullSecrets: []
      registry: docker.io
      repository: bitnami/postgres-exporter
      tag: 0.11.1-debian-11-r69
    livenessProbe:
      enabled: true
      failureThreshold: 6
      initialDelaySeconds: 5
      periodSeconds: 10
      successThreshold: 1
      timeoutSeconds: 5
    prometheusRule:
      enabled: false
      labels: {}
      namespace: ""
      rules: []
    readinessProbe:
      enabled: true
      failureThreshold: 6
      initialDelaySeconds: 5
      periodSeconds: 10
      successThreshold: 1
      timeoutSeconds: 5
    resources:
      limits: {}
      requests: {}
    service:
      annotations:
        prometheus.io/port: '{{ .Values.metrics.service.ports.metrics }}'
        prometheus.io/scrape: "true"
      clusterIP: ""
      ports:
        metrics: 9187
      sessionAffinity: None
    serviceMonitor:
      enabled: false
      honorLabels: false
      interval: ""
      jobLabel: ""
      labels: {}
      metricRelabelings: []
      namespace: ""
      relabelings: []
      scrapeTimeout: ""
      selector: {}
    startupProbe:
      enabled: false
      failureThreshold: 15
      initialDelaySeconds: 10
      periodSeconds: 10
      successThreshold: 1
      timeoutSeconds: 1
  nameOverride: ""
  networkPolicy:
    egressRules:
      customRules: {}
      denyConnectionsToExternal: false
    enabled: false
    ingressRules:
      primaryAccessOnlyFrom:
        customRules: {}
        enabled: false
        namespaceSelector: {}
        podSelector: {}
      readReplicasAccessOnlyFrom:
        customRules: {}
        enabled: false
        namespaceSelector: {}
        podSelector: {}
    metrics:
      enabled: false
      namespaceSelector: {}
      podSelector: {}
  postgresqlDataDir: /bitnami/postgresql/data
  postgresqlSharedPreloadLibraries: pgaudit
  primary:
    affinity: {}
    annotations: {}
    args: []
    command: []
    configuration: ""
    containerSecurityContext:
      enabled: true
      runAsUser: 1001
    customLivenessProbe: {}
    customReadinessProbe: {}
    customStartupProbe: {}
    existingConfigmap: ""
    existingExtendedConfigmap: ""
    extendedConfiguration: ""
    extraEnvVars: []
    extraEnvVarsCM: ""
    extraEnvVarsSecret: ""
    extraPodSpec: {}
    extraVolumeMounts: []
    extraVolumes: []
    hostAliases: []
    hostIPC: false
    hostNetwork: false
    initContainers: []
    initdb:
      args: ""
      password: ""
      postgresqlWalDir: ""
      scripts: {}
      scriptsConfigMap: ""
      scriptsSecret: ""
      user: ""
    labels: {}
    lifecycleHooks: {}
    livenessProbe:
      enabled: true
      failureThreshold: 6
      initialDelaySeconds: 30
      periodSeconds: 10
      successThreshold: 1
      timeoutSeconds: 5
    name: primary
    nodeAffinityPreset:
      key: ""
      type: ""
      values: []
    nodeSelector: {}
    persistence:
      accessModes:
      - ReadWriteOnce
      annotations: {}
      dataSource: {}
      enabled: true
      existingClaim: ""
      labels: {}
      mountPath: /bitnami/postgresql
      selector: {}
      size: 5Gi  # A changer
      storageClass: ""
      subPath: ""
    pgHbaConfiguration: ""
    podAffinityPreset: ""
    podAnnotations: {}
    podAntiAffinityPreset: soft
    podLabels: {}
    podSecurityContext:
      enabled: true
      fsGroup: 1001
    priorityClassName: ""
    readinessProbe:
      enabled: true
      failureThreshold: 6
      initialDelaySeconds: 5
      periodSeconds: 10
      successThreshold: 1
      timeoutSeconds: 5
    resources:
      limits: {}
      requests:
        cpu: 250m
        memory: 256Mi
    schedulerName: ""
    service:
      annotations: {}
      clusterIP: ""
      externalTrafficPolicy: Cluster
      extraPorts: []
      headless:
        annotations: {}
      loadBalancerIP: ""
      loadBalancerSourceRanges: []
      nodePorts:
        postgresql: "30005"
      ports:
        postgresql: 5432
      sessionAffinity: None
      sessionAffinityConfig: {}
      type: NodePort
    sidecars: []
    standby:
      enabled: false
      primaryHost: ""
      primaryPort: ""
    startupProbe:
      enabled: false
      failureThreshold: 15
      initialDelaySeconds: 30
      periodSeconds: 10
      successThreshold: 1
      timeoutSeconds: 1
    terminationGracePeriodSeconds: ""
    tolerations: []
    topologySpreadConstraints: []
    updateStrategy:
      rollingUpdate: {}
      type: RollingUpdate
  psp:
    create: false
  rbac:
    create: false
    rules: []
  readReplicas:
    affinity: {}
    annotations: {}
    args: []
    command: []
    containerSecurityContext:
      enabled: true
      runAsUser: 1001
    customLivenessProbe: {}
    customReadinessProbe: {}
    customStartupProbe: {}
    extendedConfiguration: ""
    extraEnvVars: []
    extraEnvVarsCM: ""
    extraEnvVarsSecret: ""
    extraPodSpec: {}
    extraVolumeMounts: []
    extraVolumes: []
    hostAliases: []
    hostIPC: false
    hostNetwork: false
    initContainers: []
    labels: {}
    lifecycleHooks: {}
    livenessProbe:
      enabled: true
      failureThreshold: 6
      initialDelaySeconds: 30
      periodSeconds: 10
      successThreshold: 1
      timeoutSeconds: 5
    name: read
    nodeAffinityPreset:
      key: ""
      type: ""
      values: []
    nodeSelector: {}
    persistence:
      accessModes:
      - ReadWriteOnce
      annotations: {}
      dataSource: {}
      enabled: true
      existingClaim: ""
      labels: {}
      mountPath: /bitnami/postgresql
      selector: {}
      size: 8Gi
      storageClass: ""
      subPath: ""
    podAffinityPreset: ""
    podAnnotations: {}
    podAntiAffinityPreset: soft
    podLabels: {}
    podSecurityContext:
      enabled: true
      fsGroup: 1001
    priorityClassName: ""
    readinessProbe:
      enabled: true
      failureThreshold: 6
      initialDelaySeconds: 5
      periodSeconds: 10
      successThreshold: 1
      timeoutSeconds: 5
    replicaCount: 1
    resources:
      limits: {}
      requests:
        cpu: 250m
        memory: 256Mi
    schedulerName: ""
    service:
      annotations: {}
      clusterIP: ""
      externalTrafficPolicy: Cluster
      extraPorts: []
      headless:
        annotations: {}
      loadBalancerIP: ""
      loadBalancerSourceRanges: []
      nodePorts:
        postgresql: ""
      ports:
        postgresql: 5432
      sessionAffinity: None
      sessionAffinityConfig: {}
      type: ClusterIP
    sidecars: []
    startupProbe:
      enabled: false
      failureThreshold: 15
      initialDelaySeconds: 30
      periodSeconds: 10
      successThreshold: 1
      timeoutSeconds: 1
    terminationGracePeriodSeconds: ""
    tolerations: []
    topologySpreadConstraints: []
    updateStrategy:
      rollingUpdate: {}
      type: RollingUpdate
  replication:
    applicationName: my_application
    numSynchronousReplicas: 0
    synchronousCommit: "off"
  serviceAccount:
    annotations: {}
    automountServiceAccountToken: true
    create: false
    name: ""
  serviceBindings:
    enabled: false
  shmVolume:
    enabled: true
    sizeLimit: ""
  tls:
    autoGenerated: false
    certCAFilename: ""
    certFilename: ""
    certKeyFilename: ""
    certificatesSecret: ""
    crlFilename: ""
    enabled: false
    preferServerCiphers: true
  volumePermissions:
    containerSecurityContext:
      runAsUser: 0
    enabled: false
    image:
      digest: ""
      pullPolicy: IfNotPresent
      pullSecrets: []
      registry: docker.io
      repository: bitnami/bitnami-shell
      tag: 11-debian-11-r98
    resources:
      limits: {}
      requests: {}

# values for pgadmin
pgadmin:
  VolumePermissions:
    enabled: false
  affinity: {}
  annotations: {}
  autoscaling:
    enabled: false
    maxReplicas: 100
    minReplicas: 1
    targetCPUUtilizationPercentage: 80
  containerPorts:
    http: 80
  containerSecurityContext:
    allowPrivilegeEscalation: false
    enabled: false
  env:
    email: admin@gps.com
    enhanced_cookie_protection: "False"
    password: SuperSecret
    variables: []
  envVarsFromConfigMaps: []
  envVarsFromSecrets: []
  existingSecret: ""
  extraConfigmapMounts: []
  extraContainers: ""
  extraDeploy: []
  extraInitContainers: ""
  extraSecretMounts: []
  extraVolumeMounts: []
  extraVolumes: []
  image:
    pullPolicy: IfNotPresent
    registry: docker.io
    repository: dpage/pgadmin4
    tag: ""
  ingress:
    annotations: {}
    enabled: false
    hosts:
    - host: chart-example.local
      paths:
      - path: /
        pathType: Prefix
    tls: []
  init:
    resources: {}
  livenessProbe:
    failureThreshold: 3
    initialDelaySeconds: 30
    periodSeconds: 60
    successThreshold: 1
    timeoutSeconds: 15
  namespace: null
  networkPolicy:
    enabled: true
  nodeSelector: {}
  persistentVolume:
    storageClass: ""
    accessModes:
    - ReadWriteOnce
    annotations: {}
    enabled: true
    size: 5Gi
  podAnnotations: {}
  podLabels: {}
  priorityClassName: ""
  readinessProbe:
    failureThreshold: 3
    initialDelaySeconds: 30
    periodSeconds: 60
    successThreshold: 1
    timeoutSeconds: 15
  replicaCount: 1
  resources: {}
  secretKeys:
    pgadminPasswordKey: password
  securityContext:
    fsGroup: 5050
    runAsGroup: 5050
    runAsUser: 5050
  serverDefinitions:
    enabled: false
    servers: null
  service:
    annotations: {}
    clusterIP: ""
    loadBalancerIP: ""
    port: 80
    portName: http
    targetPort: 80
    type: NodePort
    nodePort: 30007
  serviceAccount:
    annotations: {}
    create: false
    name: ""
  strategy: {}
  test:
    image:
      registry: docker.io
      repository: busybox
      tag: latest
    resources: {}
    securityContext:
      fsGroup: 5051
      runAsGroup: 5051
      runAsUser: 5051
  tolerations: []

# values for minio
minio:
  enabled: true
    ## Provide a name in place of minio for `app:` labels
  additionalAnnotations: {}
  additionalLabels: {}
  affinity: {}
  bucketRoot: ""
  buckets: []
  certsPath: /etc/minio/certs/
  clusterDomain: cluster.local
  configPathmc: /etc/minio/mc/
  consoleIngress:
    annotations: {}
    enabled: false
    hosts:
    - console.minio-example.local
    ingressClassName: null
    labels: {}
    path: /
    tls: []
  consoleService:
    annotations: {}
    clusterIP: null
    externalIPs: []
    loadBalancerIP: null
    nodePort: 30001
    port: "9001"
    type: NodePort
  customCommandJob:
    exitCommand: ""
    resources:
      requests:
        memory: 128Mi
    securityContext:
      enabled: false
      runAsGroup: 1000
      runAsUser: 1000
  customCommands: null
  deploymentUpdate:
    maxSurge: 100%
    maxUnavailable: 0
    type: RollingUpdate
  drivesPerNode: 1
  environment: null
  etcd:
    clientCert: ""
    clientCertKey: ""
    corednsPathPrefix: ""
    endpoints: []
    pathPrefix: ""
  existingSecret: ""
  extraArgs: []
  extraContainers: []
  extraSecret: null
  extraVolumeMounts: []
  extraVolumes: []
  fullnameOverride: ""
  ignoreChartChecksums: false
  image:
    pullPolicy: IfNotPresent
    repository: quay.io/minio/minio
    tag: RELEASE.2023-07-07T07-13-57Z
  imagePullSecrets: []
  ingress:
    annotations: {}
    enabled: false
    hosts:
    - minio-example.local
    ingressClassName: null
    labels: {}
    path: /
    tls: []
  makeBucketJob:
    exitCommand: ""
    resources:
      requests:
        memory: 128Mi
    securityContext:
      enabled: false
      runAsGroup: 1000
      runAsUser: 1000
  makePolicyJob:
    exitCommand: ""
    resources:
      requests:
        memory: 128Mi
    securityContext:
      enabled: false
      runAsGroup: 1000
      runAsUser: 1000
  makeServiceAccountJob:
    exitCommand: ""
    resources:
      requests:
        memory: 128Mi
    securityContext:
      enabled: false
      runAsGroup: 1000
      runAsUser: 1000
  makeUserJob:
    exitCommand: ""
    resources:
      requests:
        memory: 128Mi
    securityContext:
      enabled: false
      runAsGroup: 1000
      runAsUser: 1000
  mcImage:
    pullPolicy: IfNotPresent
    repository: quay.io/minio/mc
    tag: RELEASE.2023-06-28T21-54-17Z
  metrics:
    serviceMonitor:
      additionalLabels: {}
      annotations: {}
      enabled: false
      includeNode: false
      interval: null
      namespace: null
      public: true
      relabelConfigs: {}
      relabelConfigsCluster: {}
      scrapeTimeout: null
  minioAPIPort: "9000"
  minioConsolePort: "9001"
  mode: distributed
  mountPath: /export
  nameOverride: ""
  networkPolicy:
    allowExternal: true
    enabled: false
  nodeSelector: {}
  oidc:
    claimName: policy
    claimPrefix: ""
    clientId: minio
    clientSecret: ""
    comment: ""
    configUrl: https://identity-provider-url/.well-known/openid-configuration
    enabled: false
    redirectUri: https://console-endpoint-url/oauth_callback
    scopes: openid,profile,email
  persistence:
    accessMode: ReadWriteOnce
    annotations: {}
    enabled: true
    existingClaim: ""
    size: 5Gi
    storageClass: ""
    subPath: ""
    volumeName: ""
  podAnnotations: {}
  podDisruptionBudget:
    enabled: false
    maxUnavailable: 1
  podLabels: {}
  policies: []
  pools: 1
  postJob:
    affinity: {}
    annotations: {}
    nodeSelector: {}
    podAnnotations: {}
    securityContext:
      enabled: false
      fsGroup: 1000
      runAsGroup: 1000
      runAsUser: 1000
    tolerations: []
  priorityClassName: ""
  replicas: 3
  resources:
    requests:
      memory: 1Gi
  rootPassword: ""
  rootUser: ""
  runtimeClassName: ""
  securityContext:
    enabled: true
    fsGroup: 1000
    fsGroupChangePolicy: OnRootMismatch
    runAsGroup: 1000
    runAsUser: 1000
  service:
    annotations: {}
    clusterIP: null
    externalIPs: []
    loadBalancerIP: null
    nodePort: 32000
    port: "9000"
    type: ClusterIP
  serviceAccount:
    create: true
    name: minio-sa
  statefulSetUpdate:
    updateStrategy: RollingUpdate
  svcaccts: []
  tls:
    certSecret: ""
    enabled: false
    privateKey: private.key
    publicCrt: public.crt
  tolerations: []
  topologySpreadConstraints: []
  trustedCertsSecret: ""
  users:
  - accessKey: admin  # A
    policy: consoleAdmin
    secretKey: adminpassword


